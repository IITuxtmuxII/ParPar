ParPar
High performance PAR2 creation tool
-----------------------------------

Usage: parpar -s <slice_size/count> -o <output> [options] [--] <input1> [<input2>...]

Unless otherwise specified, all options take one parameter.

PAR2 Options:

  -s,  --input-slices        Slice/block size or number of input slices/blocks.
                             To specify exact slice size, append a size suffix
                             to the number. Examples:
                                 `-s1000`: selects a slice size so that there
                                           are 1000 input slices. Note that
                                           ParPar will error if it cannot
                                           select a slice size which satisfies
                                           this condition exactly
                                 `-s1M`: sets the slice size to 1 megabyte
                                 `-s1024B`: set the slice size to 1 kilobyte
                             This option must be specified.
       --min-input-slices    Enables the number of slices to be automatically
                             scaled if it falls below this value. This can be
                             either a slice size, or number of slices, and
                             follows the same format as `--input-slices`
                             Default is `--input-slices` (disable auto-scaling)
       --max-input-slices    As with `--min-input-slices` but specifies an
                             upper limit.
       --slice-size-multiple When selecting a slice size, ensure that it is a
                             multiple of this value.
                             Default is `--input-slices` if size specified and
                             `--min-input-slices` equals that size, otherwise
                             is 4B
  -r,  --recovery-slices     Number of recovery slices to generate. You can
                             append a suffix to auto-calculate this, as in the
                             following examples:
                                 `-r100`: generates 100 recovery slices
                                 `-r15.7%`: generates 15.7% recovery
                                 `-r2.5M`: generates 2.5MB of recovery
                                 `-r2l`: recovery slices equals number of input
                                         slices from 2 largest files
                                 `-r1.5s`: recovery slices equals number of
                                           input slices from smallest file,
                                           plus half the number of input slices
                                           for the second smallest file
                                 `-r0.5w`: recovery slices equals the square
                                           root of the total number of input
                                           slices (or input_slices**0.5 where
                                           ** denotes power)
                                 `-r1n`: computes r = s/max(1,log2(s)), where
                                         'r' denotes number of recovery slices,
                                         'log2' denotes logarithm base 2, and
                                         's' denotes the number preceeding the
                                         'n' suffix (1 in this case) multiplied
                                         by the total number of input slices
                             The 'l', 's', 'w' and 'n' suffixes can be followed
                             by a scale factor, e.g. `-r1l*1.5` takes the
                             number of slices in the largest file and
                             multiplies it by 1.5.
                             You can also specify multiple values by joining
                             them with `+` or `-`, e.g. `-r10%+2` will generate
                             10% recovery plus 2 extra slices.
                             Default is 0, which generates no recovery.
       --min-recovery-slices Enables number of recovery slices to be
                             automatically scaled if it falls below this value.
                             This is specified in the same format as
                             `--recovery-slices`.
                             Default is `--recovery-slices` (no auto-scaling)
       --max-recovery-slices Upper limit counterpart to `--min-recovery-slices`
                             Default is 65537. This default value has the
                             effect of making specified percentages or sizes
                             given to `--recovery-slices` a minimum amount. In
                             other words, `-r5%` effectively means 'at least
                             5%' with this default value, whilst `-r5%
                             --max-recovery-slices=5%` would effectively mean
                             'exactly 5%' and `-r5% --max-recovery-slices=5%
                             --min-recovery-slices=0` would mean 'at most 5%'.
                             This default also causes an error to be thrown if
                             the number exceeds the maximum of 65536.
  -e,  --recovery-offset     Recovery slice start offset. Default 0.
  -c,  --comment             Add PAR2 comment. Can be specified multiple times.
       --packet-redundancy   How critical packets are repeated, can be either:
                                 none: only store a single copy of packets
                                 pow2: repeat packets in a power-of-2 fashion
                                       amongst recovery packets
                             Default is `pow2`.
  -f,  --filepath-format     How to format input file paths, can be either:
                                 basename: discard paths
                                 keep: retain full paths
                                 common: discard common parts of paths
                             Default is `common`.
       --unicode             Whether to force PAR2 unicode packets to be
                             generated. If set, unicode packets will always be
                             generated. If explicitly unset (`--no-unicode`),
                             will force unicode packets to never by generated.
                             Default is to auto detect (use if non 7-bit ASCII
                             characters present).
       --ascii-charset       Character set to use for "ASCII" packets. Default
                             is `utf-8`.

Output Options:

  -o,  --out                 Base PAR2 file name. A .par2 extension will be
                             appeneded if not supplied.
  -O,  --overwrite           Overwrite existing files if they exist. This
                             option doesn't take any parameters.
  -n,  --std-naming          Use standard naming scheme for recovery files,
                             instead of that popularized by par2cmdline. Output
                             names will look like xxx.vol12-22.par2 instead of
                             xxx.vol12+10.par2
                             This option doesn't take any parameters.
  -d,  --slice-dist          Specify how recovery slices are distributed
                             amongst output files. Can be:
                                 equal: each file contains `--slices-per-file`
                                        slices
                                 uniform: like `equal` but try to distribute
                                          slices evenly distributed amongst
                                          files
                                 pow2: power-of-2 sizing scheme (default)
  -p,  --slices-per-file     Specify the maximum number of slices each file
                             may contain. This option follows the same format
                             as `--recovery-slices` and supports the same
                             suffixes. By default, fractional slices are
                             rounded to the nearest whole slice, but rounding
                             can be controlled by prefixing this option with
                             '<' (round down) or '>' (round up) [also take care
                             that the shell may interpret these characters, so
                             escape them if appropriate]
                             Default 65536
       --slices-first-file   Number of slices in the first recovery file. If
                             `--slice-dist` is `pow2`, the subsequent file will
                             contain double this number of slices. Format of
                             this option is identical to `--slices-per-file`.
                             Default is 1 if `--slice-dist` is `pow2`, ignored
                             if `--slice-dist` is `uniform`, otherwise equals
                             `--slices-per-file`
       --noindex             Don't output an index file (file with no recovery
                             blocks). This option takes no value.

Performance Options:

  -m,  --memory              Maximum amount of memory to use for recovery
                             slices. If all recovery slices cannot be held in
                             memory, ParPar will run multiple passes on input
                             data to generate recovery, so increasing this
                             value as much as possible, will greatly improve
                             performance. Default `256M`.
                             Note that additional memory is used during
                             processing, particularly if large slice sizes are
                             being used.
  -t,  --threads             Limit number of threads to use. Default equals
                             number of CPU cores.
       --min-chunk-size      Minimum chunking size. Set to 0 to disable
                             chunking. This is a tradeoff between sequential
                             and random I/O. It is preferrable to use larger
                             values (or 0) on hard disks, where random I/O is
                             slow, but smaller values on flash based storage,
                             where random I/O is faster, relative to bandwidth.
                             Default `128K`.
       --seq-read-size       Target read buffer size for sequential reading.
                             Actually buffer size will vary, and may be
                             significantly larger depending on memory limit
                             supplied. Default `4M`
       --proc-batch-size     Number of slices to submit as a job for GF
                             calculation.
       --proc-buffer-size    Number of additional slices to buffer. Set to 0
                             to disable bufferring. Default equals
                             `--proc-batch-size`
       --method              Algorithm for performing GF multiplies. Process
                             can crash if CPU does not support selected method.
                             Choices are:
                                 lh_lookup: split 2x 8-bit scalar table lookup
                                 xor: vector XOR bit dependencies
                                 xor128: force SSE2 variant of `xor`
                                 xor256: force AVX2 x64 variant of `xor`
                                 xor512: force AVX512BW x64 variant of `xor`
                                 shuffle: split 4x 4-bit vector table lookup
                                 shuffle128: force SSSE3 variant of `shuffle`
                                 shuffle256: force AVX2 variant of `shuffle`
                                 shuffle512: force AVX512BW variant of `shuffle`
                                 affine: split 2x 8-bit vector XOR dependencies
                                 affine128: force GFNI variant of `affine`
                                 affine512: force AVX512BW + GFNI `affine`
                             Default is auto-detected. This option should
                             generally never be changed, and left at default.
                             Currently, this option may also not do what you
                             might expect it to do.

UI Options:

  All of the following options take no parameters.

  -q,  --quiet               Suppress information output
  -?,  --help                Displays this list of options
       --version             Print application version number and exit

Input Files:

  Additional arguments are taken as files to be processed.

  -R,  --recurse             If specified, recurse into subdirectories. This
                             option takes no values.
  -i,  --input-file          Supply a list of files to be posted, separated
                             by newlines. Can be `-` to read from stdin, or a
                             command prefixed with proc:// to read from the
                             stdout of specified process (example:
                             `proc://cat somefile.txt`). Can also be an fd
                             prefixed with fd:// (requires NodeJS >= 0.12),
                             i.e. `fd://0` is an alias for stdin.
                             Can be specified multiple times.
  -0,  --input-file0         Same as the `--input-file` option, except files
                             are separated by null characters instead of
                             newlines.

------------------
Examples

  parpar -s 1M -r 64 -o my_recovery.par2 file1 file2
      Generate 64MB of PAR2 recovery files from file1 and file2, named "my_recovery"
